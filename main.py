import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, InlineKeyboardMarkup, InlineKeyboardButton
from datetime import datetime
import os
API_TOKEN = os.getenv("API_TOKEN")"

bot = Bot(token=API_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# –°–æ—Å—Ç–æ—è–Ω–∏—è
class SalaryInput(StatesGroup):
    role = State()
    hours = State()
    rate = State()
    percent = State()
    sales = State()

# –ö–Ω–æ–ø–∫–∏ —Ä–æ–ª–µ–π
role_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–û—Ñ–∏—Ü–∏–∞–Ω—Ç"), KeyboardButton(text="–ü–æ–≤–∞—Ä")],
        [KeyboardButton(text="–ë–∞—Ä–∏—Å—Ç–∞"), KeyboardButton(text="–ö–∞—Å—Å–∏—Ä")]
    ],
    resize_keyboard=True,
    one_time_keyboard=True
)

# /start
@dp.message(CommandStart())
async def start(message: types.Message, state: FSMContext):
    await message.answer(
        "üëã –ê—Å—Å–∞–ª–∞–º—É –∞–ª–µ–π–∫—É–º!\n\n"
        "–≠—Ç–æ –±–æ—Ç –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ —Ç–≤–æ–π (–Ω–∏–∫–æ–º—É –Ω–µ –Ω—É–∂–Ω–æ–πüòÅ)–∑–∞—Ä–ø–ª–∞—Ç—ã –∑–∞ –¥–µ–Ω—å –≤ –ü–µ–∫–∞—Ä–∏—É—Å–µ üí∏\n"
        "–≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º –æ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫—Ä—É—Ç—ã–º,–Ω—É –∞ –ø–æ–∫–∞ —á—Ç–æ –ª–µ–Ω–∏–≤—ã–π –†–∞–º–∞–∑–∞–Ω —Å–æ–∑–¥–∞–ª —Ç–æ–ª—å–∫–æ —ç—Ç–æ '—á—É–¥–æ'"
        "üëâ –í—ã–±–µ—Ä–∏ —Å–≤–æ—é —Ä–æ–ª—å –≤ –ü–µ–∫–∞—Ä–∏—É—Å–µ:"
        "–ö –ø—Ä–∏–º–µ—Ä—É –î–æ—Ö–ª—ã–π –æ—Ñ–∏–∫,—Ç–∞–º –≤–Ω–∏–∑—É –∫–Ω–æ–ø–∫–∞ –µ—Å—Ç—å",
        reply_markup=role_kb
    )
    await state.set_state(SalaryInput.role)

# –†–æ–ª—å
@dp.message(SalaryInput.role)
async def get_role(message: types.Message, state: FSMContext):
    await state.update_data(role=message.text)
    await message.answer("‚è± –°–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ —Ç—ã —Å–µ–≥–æ–¥–Ω—è –æ—Ç—Ä–∞–±–æ—Ç–∞–ª?üßê", reply_markup=ReplyKeyboardRemove())
    await state.set_state(SalaryInput.hours)

# –ß–∞—Å—ã
@dp.message(SalaryInput.hours)
async def get_hours(message: types.Message, state: FSMContext):
    try:
        hours = float(message.text)
        await state.update_data(hours=hours)
        await message.answer("üíµ –ö–∞–∫–∞—è —É —Ç–µ–±—è —Å—Ç–∞–≤–∫–∞ –≤ —á–∞—Å? –ù—É –ø—Ä–æ—Ü–µ–Ω—Ç –¥–∞")
        await state.set_state(SalaryInput.rate)
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏ –¥–∞ —á–∏—Å–ª–æ –≥–æ–≤–æ—Ä—é –∂–µ, –ø—Ä–∏–º–µ—Ä: 8")

# –°—Ç–∞–≤–∫–∞
@dp.message(SalaryInput.rate)
async def get_rate(message: types.Message, state: FSMContext):
    try:
        rate = float(message.text)
        await state.update_data(rate=rate)
        await message.answer("üìà –°–∫–æ–ª—å–∫–æ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ —Å –ø—Ä–æ–¥–∞–∂ —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å?üòâ\n–ï—Å–ª–∏ –Ω–µ—Ç ‚Äî –≤–≤–µ–¥–∏ 0.")
        await state.set_state(SalaryInput.percent)
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏ —á–∏—Å–ª–æ –º–∞–ª, –ø—Ä–∏–º–µ—Ä: 300")

# –ü—Ä–æ—Ü–µ–Ω—Ç
@dp.message(SalaryInput.percent)
async def get_percent(message: types.Message, state: FSMContext):
    try:
        percent = float(message.text)
        await state.update_data(percent=percent)
        await message.answer("üí∞ –ù–∞ –∫–∞–∫—É—é —Å—É–º–º—É —Ç—ã —Å–µ–≥–æ–¥–Ω—è –ø—Ä–æ–¥–∞–ª? (–∫–∞—Å—Å–∞ —Ç–≤–æ—è)\n–ï—Å–ª–∏ –Ω–µ—Ç ‚Äî –≤–≤–µ–¥–∏ 0.")
        await state.set_state(SalaryInput.sales)
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏ —á–∏—Å–ª–æ –≤–∞—è—è—è, –ø—Ä–∏–º–µ—Ä: 5000 –Ω—É —Ç–∏–ø–æ —Å–ª–∏—Ç–Ω–æ –∫–æ—Ä–æ—á–µ")

# –ü—Ä–æ–¥–∞–∂–∏
@dp.message(SalaryInput.sales)
async def get_sales(message: types.Message, state: FSMContext):
    try:
        sales = float(message.text)
        user_data = await state.get_data()
        role = user_data["role"]
        hours = user_data["hours"]
        rate = user_data["rate"]
        percent = user_data["percent"]

        base_pay = hours * rate
        bonus = (percent / 100) * sales
        total = base_pay + bonus
        date = datetime.now().strftime("%d.%m.%Y")

        restart_kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üîÅ –ü–æ—Å—á–∏—Ç–∞—Ç—å –µ—â—ë", callback_data="restart")]
            ]
        )

        await message.answer(
            f"üìä *–¢–≤–æ—è –ø–∞–∫—ä–∏—Ä—Å–∫–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞ –∑–∞ {date}:*\n\n"
            f"üßë‚Äçüíº *–î–æ–ª–∂–Ω–æ—Å—Ç—å:* `{role}`\n"
            f"‚è± *–ß–∞—Å—ã:* `{hours}` —á.\n"
            f"üíµ *–°—Ç–∞–≤–∫–∞:* `{rate}‚ÇΩ`\n"
            f"üìà *–ü—Ä–æ—Ü–µ–Ω—Ç:* `{percent}%`\n"
            f"üí∞ *–ö–∞—Å—Å–∞:* `{sales}‚ÇΩ`\n"
            f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
            f"üîπ *–ò—Ç–æ–≥–æ:* `{total:.2f}‚ÇΩ`",
            parse_mode="Markdown",
            reply_markup=restart_kb
        )

        await state.clear()

    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏ —á–∏—Å–ª–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –ø—Ä–∏–º–µ—Ä: 5000")

# –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ
@dp.callback_query(lambda c: c.data == "restart")
async def restart(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.answer("üîÑ –ü–æ—Å—á–∏—Ç–∞–µ–º –∑–∞–Ω–æ–≤–æ!\n\nüëâ –í—ã–±–µ—Ä–∏ —Å–≤–æ—é –±–µ–¥–Ω—É—é –¥–æ–ª–∂–Ω–æ—Å—Ç—å:", reply_markup=role_kb)
    await state.set_state(SalaryInput.role)
    await callback.answer()

# –ó–∞–ø—É—Å–∫
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
